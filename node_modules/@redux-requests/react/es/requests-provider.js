function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useMemo } from 'react';
import PropTypes from 'prop-types';
import { createStore, applyMiddleware, combineReducers, compose } from 'redux';
import { Provider } from 'react-redux';
import { handleRequests, createRequestsStore } from '@redux-requests/core';
import RequestsContext from './requests-context';

var defaultGetMiddleware = function defaultGetMiddleware(requestsMiddleware) {
  return requestsMiddleware;
};

var RequestsProvider = function RequestsProvider(_ref) {
  var children = _ref.children,
      requestsConfig = _ref.requestsConfig,
      extraReducers = _ref.extraReducers,
      customStore = _ref.store,
      _ref$getMiddleware = _ref.getMiddleware,
      getMiddleware = _ref$getMiddleware === void 0 ? defaultGetMiddleware : _ref$getMiddleware,
      _ref$suspense = _ref.suspense,
      suspense = _ref$suspense === void 0 ? false : _ref$suspense,
      _ref$autoLoad = _ref.autoLoad,
      autoLoad = _ref$autoLoad === void 0 ? false : _ref$autoLoad,
      _ref$autoReset = _ref.autoReset,
      autoReset = _ref$autoReset === void 0 ? false : _ref$autoReset,
      _ref$throwError = _ref.throwError,
      throwError = _ref$throwError === void 0 ? false : _ref$throwError,
      _ref$suspenseSsr = _ref.suspenseSsr,
      suspenseSsr = _ref$suspenseSsr === void 0 ? false : _ref$suspenseSsr,
      _ref$getStore = _ref.getStore,
      getStore = _ref$getStore === void 0 ? undefined : _ref$getStore,
      _ref$initialState = _ref.initialState,
      initialState = _ref$initialState === void 0 ? undefined : _ref$initialState;
  var contextValue = useMemo(function () {
    return {
      suspense: suspense,
      autoLoad: autoLoad,
      autoReset: autoReset,
      throwError: throwError,
      suspenseSsr: suspenseSsr
    };
  }, [suspense, autoLoad, autoReset, throwError, suspenseSsr]);
  var store = useMemo(function () {
    if (customStore) {
      return createRequestsStore(customStore);
    }

    var _handleRequests = handleRequests(requestsConfig),
        requestsReducer = _handleRequests.requestsReducer,
        requestsMiddleware = _handleRequests.requestsMiddleware;

    var reducers = combineReducers(_extends({
      requests: requestsReducer
    }, extraReducers));
    var composeEnhancers = typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;
    return createRequestsStore(createStore(reducers, initialState, composeEnhancers(applyMiddleware.apply(void 0, getMiddleware(requestsMiddleware)))));
  }, []);

  if (getStore) {
    getStore(store);
  }

  return /*#__PURE__*/React.createElement(Provider, {
    store: store
  }, /*#__PURE__*/React.createElement(RequestsContext.Provider, {
    value: contextValue
  }, children));
};

RequestsProvider.propTypes = process.env.NODE_ENV !== "production" ? {
  children: PropTypes.element.isRequired,
  requestsConfig: PropTypes.any,
  extraReducers: PropTypes.any,
  store: PropTypes.any,
  getMiddleware: PropTypes.func,
  suspense: PropTypes.bool,
  autoLoad: PropTypes.bool,
  autoReset: PropTypes.bool,
  throwError: PropTypes.bool,
  suspenseSsr: PropTypes.bool,
  getStore: PropTypes.func,
  initialState: PropTypes.any
} : {};
export default RequestsProvider;