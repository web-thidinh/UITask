import { useEffect } from 'react';
import { useStore } from 'react-redux';
import { addWatcher, removeWatcher, stopSubscriptions } from '@redux-requests/core';
import useDispatchRequest from './use-dispatch-request';
var emptyVariables = [];

var useSubscriptions = function useSubscriptions(_ref) {
  var _ref$variables = _ref.variables,
      variables = _ref$variables === void 0 ? emptyVariables : _ref$variables,
      type = _ref.type,
      requestKey = _ref.requestKey,
      action = _ref.action,
      _ref$active = _ref.active,
      active = _ref$active === void 0 ? true : _ref$active;
  var dispatchRequest = useDispatchRequest();
  var store = useStore();
  var key = "" + type + (requestKey || '');
  useEffect(function () {
    if (active) {
      dispatchRequest((action || type).apply(void 0, variables));
    }
  }, [active, action, type].concat(variables));
  useEffect(function () {
    dispatchRequest(addWatcher(key));
    return function () {
      dispatchRequest(removeWatcher(key));

      if (!store.getState().requests.watchers[key]) {
        dispatchRequest(stopSubscriptions([key]));
      }
    };
  }, [type, requestKey]);
};

export default useSubscriptions;