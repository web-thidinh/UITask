function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { useEffect, useCallback, useMemo, useContext } from 'react';
import { useSelector, useStore } from 'react-redux';
import { getQuerySelector, resetRequests, stopPolling, addWatcher, removeWatcher, joinRequest } from '@redux-requests/core';
import useDispatchRequest from './use-dispatch-request';
import RequestsContext from './requests-context';
var emptyVariables = [];

var useQuery = function useQuery(_ref) {
  var _ref$variables = _ref.variables,
      variables = _ref$variables === void 0 ? emptyVariables : _ref$variables,
      autoLoad = _ref.autoLoad,
      autoReset = _ref.autoReset,
      throwError = _ref.throwError,
      suspense = _ref.suspense,
      suspenseSsr = _ref.suspenseSsr,
      selectorProps = _objectWithoutPropertiesLoose(_ref, ["variables", "autoLoad", "autoReset", "throwError", "suspense", "suspenseSsr"]);

  var requestContext = useContext(RequestsContext);
  suspenseSsr = suspenseSsr === undefined ? requestContext.suspenseSsr : suspenseSsr;
  suspense = suspense === undefined ? requestContext.suspense : suspense;
  autoLoad = autoLoad === undefined ? requestContext.autoLoad : autoLoad;
  autoReset = autoReset === undefined ? requestContext.autoReset : autoReset;
  throwError = throwError === undefined ? requestContext.throwError : throwError;
  var dispatchRequest = useDispatchRequest();
  var store = useStore();
  var key = "" + selectorProps.type + (selectorProps.requestKey || '');
  var dispatchQuery = useCallback(function () {
    return dispatchRequest((selectorProps.action || selectorProps.type).apply(void 0, variables));
  }, [selectorProps.action, selectorProps.type].concat(variables));
  var dispatchStopPolling = useCallback(function () {
    dispatchRequest(stopPolling([{
      requestType: selectorProps.type,
      requestKey: selectorProps.requestKey
    }]));
  }, [selectorProps.type, selectorProps.requestKey]);
  useEffect(function () {
    if (autoLoad) {
      dispatchQuery();
    }
  }, [autoLoad, dispatchQuery]);
  var query = useSelector(getQuerySelector(selectorProps));
  useEffect(function () {
    dispatchRequest(addWatcher(key));
    return function () {
      dispatchRequest(removeWatcher(key));

      if (autoReset && !store.getState().requests.watchers[key]) {
        dispatchRequest(resetRequests([{
          requestType: selectorProps.type,
          requestKey: selectorProps.requestKey
        }], true, false));
      }
    };
  }, [selectorProps.type, selectorProps.requestKey]);

  if (suspenseSsr && (query.loading || query.pristine)) {
    if (autoLoad && query.pristine) {
      throw dispatchQuery();
    }

    throw dispatchRequest(joinRequest(key, autoLoad));
  }

  if (suspense && !suspenseSsr && query.loading) {
    throw dispatchRequest(joinRequest(key));
  }

  if (throwError && query.error) {
    throw {
      error: query.error,
      type: selectorProps.type,
      requestKey: selectorProps.requestKey
    };
  }

  return useMemo(function () {
    return _extends({}, query, {
      load: dispatchQuery,
      stopPolling: dispatchStopPolling
    });
  }, [query, dispatchQuery, dispatchStopPolling]);
};

export default useQuery;