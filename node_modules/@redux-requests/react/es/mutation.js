function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import { useSelector } from 'react-redux';
import { getMutationSelector } from '@redux-requests/core';
import { reactComponentPropType } from './propTypesValidators';

var Mutation = function Mutation(_ref) {
  var type = _ref.type,
      selector = _ref.selector,
      requestKey = _ref.requestKey,
      children = _ref.children,
      Component = _ref.component,
      extraProps = _objectWithoutPropertiesLoose(_ref, ["type", "selector", "requestKey", "children", "component"]);

  var mutation = useSelector(selector || getMutationSelector({
    type: type,
    requestKey: requestKey
  }));

  if (children) {
    return children(mutation);
  }

  return /*#__PURE__*/React.createElement(Component, _extends({
    mutation: mutation
  }, extraProps));
};

Mutation.propTypes = process.env.NODE_ENV !== "production" ? {
  selector: PropTypes.func,
  type: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),
  requestKey: PropTypes.string,
  children: PropTypes.func,
  component: reactComponentPropType('Mutation')
} : {};
export default Mutation;