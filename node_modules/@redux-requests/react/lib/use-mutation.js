"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _react = require("react");

var _reactRedux = require("react-redux");

var _core = require("@redux-requests/core");

var _useDispatchRequest = _interopRequireDefault(require("./use-dispatch-request"));

var _requestsContext = _interopRequireDefault(require("./requests-context"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var emptyVariables = [];

var useMutation = function useMutation(_ref) {
  var _ref$variables = _ref.variables,
      variables = _ref$variables === void 0 ? emptyVariables : _ref$variables,
      autoReset = _ref.autoReset,
      throwError = _ref.throwError,
      suspense = _ref.suspense,
      selectorProps = _objectWithoutPropertiesLoose(_ref, ["variables", "autoReset", "throwError", "suspense"]);

  var requestContext = (0, _react.useContext)(_requestsContext["default"]);
  suspense = suspense === undefined ? requestContext.suspense : suspense;
  autoReset = autoReset === undefined ? requestContext.autoReset : autoReset;
  throwError = throwError === undefined ? requestContext.throwError : throwError;
  var dispatchRequest = (0, _useDispatchRequest["default"])();
  var store = (0, _reactRedux.useStore)();
  var key = "" + selectorProps.type + (selectorProps.requestKey || '');
  var dispatchMutation = (0, _react.useCallback)(function () {
    return dispatchRequest((selectorProps.action || selectorProps.type).apply(void 0, variables));
  }, [selectorProps.action, selectorProps.type].concat(variables));
  var mutation = (0, _reactRedux.useSelector)((0, _core.getMutationSelector)(selectorProps));
  (0, _react.useEffect)(function () {
    dispatchRequest((0, _core.addWatcher)(key));
    return function () {
      dispatchRequest((0, _core.removeWatcher)(key));

      if (autoReset && !store.getState().requests.watchers[key]) {
        dispatchRequest((0, _core.resetRequests)([{
          requestType: selectorProps.type,
          requestKey: selectorProps.requestKey
        }], false));
      }
    };
  }, [selectorProps.type, selectorProps.requestKey]);

  if (suspense && mutation.loading) {
    throw dispatchRequest((0, _core.joinRequest)(key));
  }

  if (throwError && mutation.error) {
    throw {
      error: mutation.error,
      type: selectorProps.type,
      requestKey: selectorProps.requestKey
    };
  }

  return (0, _react.useMemo)(function () {
    return _extends({}, mutation, {
      mutate: dispatchMutation
    });
  }, [mutation, dispatchMutation]);
};

var _default = useMutation;
exports["default"] = _default;