"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactRedux = require("react-redux");

var _core = require("@redux-requests/core");

var _propTypesValidators = require("./propTypesValidators");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Query = function Query(_ref) {
  var type = _ref.type,
      requestKey = _ref.requestKey,
      selector = _ref.selector,
      defaultData = _ref.defaultData,
      multiple = _ref.multiple,
      children = _ref.children,
      Component = _ref.component,
      isDataEmpty = _ref.isDataEmpty,
      showLoaderDuringRefetch = _ref.showLoaderDuringRefetch,
      noDataMessage = _ref.noDataMessage,
      ErrorComponent = _ref.errorComponent,
      errorComponentProps = _ref.errorComponentProps,
      LoadingComponent = _ref.loadingComponent,
      loadingComponentProps = _ref.loadingComponentProps,
      extraProps = _objectWithoutPropertiesLoose(_ref, ["type", "requestKey", "selector", "defaultData", "multiple", "children", "component", "isDataEmpty", "showLoaderDuringRefetch", "noDataMessage", "errorComponent", "errorComponentProps", "loadingComponent", "loadingComponentProps"]);

  var query = (0, _reactRedux.useSelector)(selector || (0, _core.getQuerySelector)({
    type: type,
    requestKey: requestKey,
    defaultData: defaultData,
    multiple: multiple
  }));
  var dataEmpty = isDataEmpty(query);

  if (query.loading && (showLoaderDuringRefetch || dataEmpty)) {
    return LoadingComponent ? /*#__PURE__*/_react["default"].createElement(LoadingComponent, _extends({
      downloadProgress: query.downloadProgress,
      uploadProgress: query.uploadProgress
    }, loadingComponentProps)) : null;
  }

  if (query.error) {
    return ErrorComponent ? /*#__PURE__*/_react["default"].createElement(ErrorComponent, _extends({
      error: query.error
    }, errorComponentProps)) : null;
  }

  if (dataEmpty) {
    return noDataMessage;
  }

  if (children) {
    return children(query);
  }

  return /*#__PURE__*/_react["default"].createElement(Component, _extends({
    query: query
  }, extraProps));
};

Query.defaultProps = {
  isDataEmpty: function isDataEmpty(query) {
    return Array.isArray(query.data) ? query.data.length === 0 : !query.data;
  },
  showLoaderDuringRefetch: true,
  noDataMessage: null,
  multiple: false
};
Query.propTypes = process.env.NODE_ENV !== "production" ? {
  type: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].func]),
  requestKey: _propTypes["default"].string,
  selector: _propTypes["default"].func,
  multiple: _propTypes["default"].bool,
  defaultData: _propTypes["default"].any,
  children: _propTypes["default"].func,
  component: (0, _propTypesValidators.reactComponentPropType)('Query'),
  isDataEmpty: _propTypes["default"].func,
  showLoaderDuringRefetch: _propTypes["default"].bool,
  noDataMessage: _propTypes["default"].node,
  errorComponent: (0, _propTypesValidators.reactComponentPropType)('Query'),
  errorComponentProps: _propTypes["default"].objectOf(_propTypes["default"].any),
  loadingComponent: (0, _propTypesValidators.reactComponentPropType)('Query'),
  loadingComponentProps: _propTypes["default"].objectOf(_propTypes["default"].any)
} : {};
var _default = Query;
exports["default"] = _default;