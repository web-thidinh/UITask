function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import axios from 'axios';

var calculateProgress = function calculateProgress(progressEvent) {
  return parseInt(progressEvent.loaded / progressEvent.total * 100);
};

export var createDriver = function createDriver(axiosInstance) {
  return function (requestConfig, requestAction, driverActions) {
    var abortSource = axios.CancelToken.source();
    var responsePromise = axiosInstance(_extends({
      cancelToken: abortSource.token,
      onDownloadProgress: driverActions.setDownloadProgress && function (progressEvent) {
        if (progressEvent.lengthComputable) {
          driverActions.setDownloadProgress(calculateProgress(progressEvent));
        }
      },
      onUploadProgress: driverActions.setUploadProgress && function (progressEvent) {
        if (progressEvent.lengthComputable) {
          driverActions.setUploadProgress(calculateProgress(progressEvent));
        }
      }
    }, requestConfig)).then(function (response) {
      return {
        data: response.data,
        status: response.status,
        headers: response.headers
      };
    })["catch"](function (error) {
      if (axios.isCancel(error)) {
        throw 'REQUEST_ABORTED';
      }

      throw error;
    });

    responsePromise.cancel = function () {
      return abortSource.cancel();
    };

    return responsePromise;
  };
};